import PandaAnalysis.MonoX.MonoXSelection as sel

def f(x):
    return basedir + x + '.root'

def addN2DDT(rootfile):
        #load the map
	trans = r.TFile(basedir+'/DDT.root')
	f56 = trans.Get("DDT_5by6")
	f53 = trans.Get("DDT_5by3")
        #open the file
        output = rootfile+"_tmp"
	fi = r.TFile(rootfile)
        fo = r.TFile(output,"RECREATE")
        for tkey in fi.GetListOfKeys():
            key=tkey.GetName()
            t = fi.Get("%s"%key)
            clonet = t.CloneTree(0)
            n = t.GetEntries()	
            ndd56 = array('f', [-99])
            clonet.Branch("n2ddt56", ndd56, 'n2ddt56'+'/F')
            ndd53 = array('f', [-99])
            clonet.Branch("n2ddt53", ndd53, 'n2ddt53'+'/F')
            for j in range(0,int(n)):
                t.GetEntry(j)
                pt = t.fjpt
                mass = t.fjmass
                rho = log(mass*mass/pt/pt)
                n2 = t.n2

                rind6 = f56.GetXaxis().FindBin(rho)
                pind6 = f56.GetYaxis().FindBin(pt)
                    
                rind3 = f53.GetXaxis().FindBin(rho)
                pind3 = f53.GetYaxis().FindBin(pt)		
		
                if rho >  f56.GetXaxis().GetBinUpEdge( f56.GetXaxis().GetNbins() ) :
                    rind6 = f56.GetXaxis().GetNbins()
                if rho <  f56.GetXaxis().GetBinLowEdge( 1 ) :
                    rind6 = 1
                if pt >  f56.GetYaxis().GetBinUpEdge( f56.GetYaxis().GetNbins() ) :
                    pind6 = f56.GetYaxis().GetNbins()
                if pt < f56.GetYaxis().GetBinLowEdge( 1 ) :
                    pind6 = 1

                if rho > f53.GetXaxis().GetBinUpEdge( f53.GetXaxis().GetNbins() ) :
                    rind3 = f53.GetXaxis().GetNbins()
                if rho <  f53.GetXaxis().GetBinLowEdge( 1 ) :
                    rind3 = 1
                if pt > f53.GetYaxis().GetBinUpEdge( f53.GetYaxis().GetNbins() ) :
                    pind3 = f53.GetYaxis().GetNbins()
                if pt < f53.GetYaxis().GetBinLowEdge( 1 ) :
                    pind3 = 1
                
                ndd56[0] = n2 - f56.GetBinContent(rind6,pind6)
                ndd53[0] = n2 - f53.GetBinContent(rind3,pind3)

                clonet.Fill()
            fo.Write()
            
        fo.Close()
        fi.Close()
	trans.Close()
        os.system("mv -f %s %s" % (output, rootfile))


def shift_btags(additional=None):
    shifted_weights = {}
    #if not any([x in region for x in ['signal','top','w']]):
    #    return shifted_weights 
    for shift in ['BUp','BDown','MUp','MDown']:
        for cent in ['sf_btag']:
            shiftedlabel = ''
            if 'sj' in cent:
                shiftedlabel += 'sj'
            if 'B' in shift:
                shiftedlabel += 'btag'
            else:
                shiftedlabel += 'mistag'
            if 'Up' in shift:
                shiftedlabel += 'Up'
            else:
                shiftedlabel += 'Down'
            weight = sel.weights[region+'_'+cent+shift]%lumi
            if additional:
                weight = tTIMES(weight,additional)
            shifted_weights[shiftedlabel] = weight
    return shifted_weights

